name: release
on:
  push:
    tags:
      - '*'

env:
  VULKANSDK_VERSION: 1.3.231.1
  DEVELOPER_DIR: /Applications/Xcode_14.0.1.app/Contents/Developer
  APPLICATION_NAME: vkpeak

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: vulkansdk
      run: |
        wget -q https://sdk.lunarg.com/sdk/download/${{ env.VULKANSDK_VERSION }}/linux/vulkansdk-linux-x86_64-${{ env.VULKANSDK_VERSION }}.tar.gz?Human=true -O vulkansdk-linux-x86_64-${{ env.VULKANSDK_VERSION }}.tar.gz
        tar -xf vulkansdk-linux-x86_64-${{ env.VULKANSDK_VERSION }}.tar.gz
    - name: build
      run: |
        export VULKAN_SDK=`pwd`/${{ env.VULKANSDK_VERSION }}/x86_64
        mkdir build && cd build
        cmake ..
        cmake --build . -j 2
    - name: package
      run: |
        mkdir -p ${{ env.PACKAGENAME }}
        cp README.md LICENSE ${{ env.PACKAGENAME }}
        cp build/${{ env.APPLICATION_NAME }} ${{ env.PACKAGENAME }}
        strip -g ${{ env.PACKAGENAME }}/${{ env.APPLICATION_NAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    needs: [setup]
    runs-on: macos-12
    env:
      PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-macos
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: vulkansdk
      run: |
        wget -q https://sdk.lunarg.com/sdk/download/${{ env.VULKANSDK_VERSION }}/mac/vulkansdk-macos-${{ env.VULKANSDK_VERSION }}.dmg?Human=true -O vulkansdk-macos-${{ env.VULKANSDK_VERSION }}.dmg
        hdiutil attach vulkansdk-macos-${{ env.VULKANSDK_VERSION }}.dmg
        cp -r /Volumes/vulkansdk-macos-${{ env.VULKANSDK_VERSION }} .
        hdiutil detach /Volumes/vulkansdk-macos-${{ env.VULKANSDK_VERSION }}
        sudo vulkansdk-macos-${{ env.VULKANSDK_VERSION }}/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }} --accept-licenses --default-answer --confirm-command install
    - name: build-x86_64
      run: |
        export VULKAN_SDK=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/macOS
        mkdir build-x86_64 && cd build-x86_64
        cmake -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES="x86_64" \
            -DVulkan_INCLUDE_DIR=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/MoltenVK/include \
            -DVulkan_LIBRARY=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
            ..
        cmake --build . -j 3
    - name: build-arm64
      run: |
        export VULKAN_SDK=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/macOS
        mkdir build-arm64 && cd build-arm64
        cmake -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DCMAKE_CROSSCOMPILING=ON -DCMAKE_SYSTEM_PROCESSOR=arm64 \
            -DVulkan_INCLUDE_DIR=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/MoltenVK/include \
            -DVulkan_LIBRARY=$GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
            ..
        cmake --build . -j 3
    - name: package
      run: |
        mkdir -p ${{ env.PACKAGENAME }}
        cp README.md LICENSE ${{ env.PACKAGENAME }}
        lipo -create build-x86_64/${{ env.APPLICATION_NAME }} build-arm64/${{ env.APPLICATION_NAME }} -o ${{ env.PACKAGENAME }}/${{ env.APPLICATION_NAME }}
        strip ${{ env.PACKAGENAME }}/${{ env.APPLICATION_NAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows:
    needs: [setup]
    runs-on: windows-latest
    env:
      UseMultiToolTask: true
    env:
      PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-windows
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: vulkansdk
      run: |
        Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/${{ env.VULKANSDK_VERSION }}/windows/VulkanSDK-${{ env.VULKANSDK_VERSION }}-Installer.exe?Human=true -OutFile VulkanSDK-${{ env.VULKANSDK_VERSION }}-Installer.exe
        ./VulkanSDK-${{ env.VULKANSDK_VERSION }}-Installer.exe --root $env:GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }} --accept-licenses --default-answer --confirm-command install
    - name: build
      run: |
        $env:VULKAN_SDK="$env:GITHUB_WORKSPACE/${{ env.VULKANSDK_VERSION }}"
        mkdir build; cd build
        cmake -A x64 ..
        cmake --build . --config Release -j 2
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "LICENSE" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "build\Release\${{ env.APPLICATION_NAME }}.exe" -Destination "${{ env.PACKAGENAME }}"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ env.APPLICATION_NAME }}-${{ needs.setup.outputs.VERSION }}-windows
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
